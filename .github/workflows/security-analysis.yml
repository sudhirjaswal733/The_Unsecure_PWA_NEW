name: Security Analysis (SAST)

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"
  workflow_dispatch:
    inputs:
      force_run:
        description: "Force run even if disabled"
        required: false
        default: false
        type: boolean

env:
  # CRITICAL: Set this to true to enable the security analysis
  # Default is false to prevent accidental runs in forks
  SECURITY_ANALYSIS_ENABLED: true

jobs:
  check-config:
    name: Check Configuration
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.config.outputs.should_run }}
    steps:
      - name: Check if analysis should run
        id: config
        run: |
          if [[ "${{ env.SECURITY_ANALYSIS_ENABLED }}" == "true" ]] || [[ "${{ github.event.inputs.force_run }}" == "true" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "✅ Security analysis is enabled"
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "⚠️  Security analysis is disabled. Set SECURITY_ANALYSIS_ENABLED to true to enable."
          fi

  codeql-analysis:
    name: CodeQL Analysis
    needs: check-config
    if: needs.check-config.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
      issues: write

    strategy:
      fail-fast: false
      matrix:
        language: ["python", "javascript"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Setup Python (for Python analysis)
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies (for Python analysis)
        if: matrix.language == 'python'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Setup Node.js (for JavaScript analysis)
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install JavaScript dependencies (for JavaScript analysis)
        if: matrix.language == 'javascript'
        run: |
          if [ -f package.json ]; then npm ci; fi

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          output: sarif-results
          upload: false

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-results/${{ matrix.language }}.sarif
          category: "/language:${{ matrix.language }}"

      - name: Process SARIF and create issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LANGUAGE: ${{ matrix.language }}
        run: |
          # Create required labels if they don't exist
          gh label create "security" --description "Security-related issues" --color "d73a4a" || true
          gh label create "codeql" --description "Issues found by CodeQL analysis" --color "f1c40f" || true
          gh label create "${{ matrix.language }}" --description "${{ matrix.language }} language issues" --color "3572A5" || true
          gh label create "automated" --description "Automatically generated issues" --color "0052cc" || true

          # Install jq if not available
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          SARIF_FILE="sarif-results/${{ matrix.language }}.sarif"

          if [ ! -f "$SARIF_FILE" ]; then
            echo "No SARIF file found for ${{ matrix.language }}"
            exit 0
          fi

          # Check if SARIF file has results
          RESULT_COUNT=$(jq '.runs[0].results | length' "$SARIF_FILE" 2>/dev/null || echo "0")

          if [ "$RESULT_COUNT" -eq 0 ]; then
            echo "No security issues found for ${{ matrix.language }}"
            exit 0
          fi

          echo "Found $RESULT_COUNT security issues for ${{ matrix.language }}"

          # Process each result
          jq -c '.runs[0].results[]' "$SARIF_FILE" | while read -r result; do
            # Extract key information
            RULE_ID=$(echo "$result" | jq -r '.ruleId')
            MESSAGE=$(echo "$result" | jq -r '.message.text')
            LEVEL=$(echo "$result" | jq -r '.level // "warning"')
            
            # Extract location information
            LOCATION=$(echo "$result" | jq -r '.locations[0].physicalLocation')
            FILE_PATH=$(echo "$LOCATION" | jq -r '.artifactLocation.uri // "unknown"')
            START_LINE=$(echo "$LOCATION" | jq -r '.region.startLine // "unknown"')
            END_LINE=$(echo "$LOCATION" | jq -r '.region.endLine // .region.startLine // "unknown"')
            
            # Get rule description from tool info
            RULE_DESC=$(jq -r --arg rule_id "$RULE_ID" '.runs[0].tool.driver.rules[] | select(.id == $rule_id) | .shortDescription.text // .fullDescription.text // "No description available"' "$SARIF_FILE")
            
            # Create severity label
            case "$LEVEL" in
              "error"|"high") SEVERITY="🔴 High" ;;
              "warning"|"medium") SEVERITY="🟡 Medium" ;;
              "note"|"low") SEVERITY="🟢 Low" ;;
              *) SEVERITY="🟡 Medium" ;;
            esac

            # Generate unique issue title
            ISSUE_TITLE="[Security] $RULE_ID in $FILE_PATH (Line $START_LINE)"
            
            # Check if issue already exists
            EXISTING_ISSUE=$(gh issue list --label "security,codeql,${{ matrix.language }}" --state open --json title,number | jq -r --arg title "$ISSUE_TITLE" '.[] | select(.title == $title) | .number')
            
            if [ -n "$EXISTING_ISSUE" ] && [ "$EXISTING_ISSUE" != "null" ]; then
              echo "Issue already exists: #$EXISTING_ISSUE"
              continue
            fi

            # Create issue body
            LINE_RANGE="$START_LINE"
            if [ "$END_LINE" != "$START_LINE" ] && [ "$END_LINE" != "unknown" ]; then
              LINE_RANGE="$START_LINE-$END_LINE"
            fi

            # Build issue body safely
            ISSUE_BODY_CONTENT="## Security Vulnerability Detected\n\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}Severity: $SEVERITY\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}Rule: \`$RULE_ID\`\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}Language: ${{ matrix.language }}\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}File: \`$FILE_PATH\`\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}Line(s): $LINE_RANGE\n\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}### Description\n$RULE_DESC\n\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}### Details\n$MESSAGE\n\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}### Location\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}- File: [\`$FILE_PATH\`](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/$FILE_PATH#L$START_LINE)\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}- Line: $LINE_RANGE\n\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}### Analysis Information\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}- Detected by: CodeQL Security Analysis\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}- Workflow Run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}- Commit: [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}- Branch: \`${{ github.ref_name }}\`\n\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}### Next Steps\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}1. Review the code at the specified location\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}2. Assess if this is a true positive or false positive\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}3. If valid, implement appropriate security fixes\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}4. Consider adding input validation, output encoding, or other security controls\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}5. Re-run the security analysis to verify the fix\n\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}---\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}This issue was automatically created by the Security Analysis workflow. Please review and address the security concern."
            
            # Convert to proper format
            printf -v ISSUE_BODY "%b" "$ISSUE_BODY_CONTENT"

            # Create the issue
            echo "Creating issue for $RULE_ID in $FILE_PATH:$START_LINE"
            gh issue create \
              --title "$ISSUE_TITLE" \
              --body "$ISSUE_BODY" \
              --label "security,codeql,${{ matrix.language }},automated" \
              --assignee "${{ github.actor }}" || true

            # Add a small delay to avoid rate limiting
            sleep 2
          done

  bandit-analysis:
    name: Bandit Python Security Analysis
    needs: check-config
    if: needs.check-config.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Bandit Security Analysis
        run: |
          bandit -r . -f json -o bandit-report.json --severity-level medium || true

      - name: Process Bandit results and create issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create required labels if they don't exist
          gh label create "security" --description "Security-related issues" --color "d73a4a" || true
          gh label create "bandit" --description "Issues found by Bandit security linter" --color "f9c23c" || true
          gh label create "python" --description "Python-related issues" --color "3572A5" || true
          gh label create "automated" --description "Automatically generated issues" --color "0052cc" || true

          if [ ! -f bandit-report.json ]; then
            echo "No Bandit report generated"
            exit 0
          fi

          # Check if there are any results
          RESULT_COUNT=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")

          if [ "$RESULT_COUNT" -eq 0 ]; then
            echo "No security issues found by Bandit"
            exit 0
          fi

          echo "Found $RESULT_COUNT security issues with Bandit"

          # Process each result
          jq -c '.results[]' bandit-report.json | while read -r result; do
            TEST_ID=$(echo "$result" | jq -r '.test_id')
            TEST_NAME=$(echo "$result" | jq -r '.test_name')
            FILENAME=$(echo "$result" | jq -r '.filename')
            LINE_NUMBER=$(echo "$result" | jq -r '.line_number')
            ISSUE_TEXT=$(echo "$result" | jq -r '.issue_text')
            ISSUE_SEVERITY=$(echo "$result" | jq -r '.issue_severity')
            ISSUE_CONFIDENCE=$(echo "$result" | jq -r '.issue_confidence')
            CODE=$(echo "$result" | jq -r '.code')

            # Create severity label
            case "$ISSUE_SEVERITY" in
              "HIGH") SEVERITY="🔴 High" ;;
              "MEDIUM") SEVERITY="🟡 Medium" ;;
              "LOW") SEVERITY="🟢 Low" ;;
              *) SEVERITY="🟡 Medium" ;;
            esac

            # Generate unique issue title
            ISSUE_TITLE="[Bandit] $TEST_NAME in $(basename "$FILENAME") (Line $LINE_NUMBER)"
            
            # Check if issue already exists
            EXISTING_ISSUE=$(gh issue list --label "security,bandit,python" --state open --json title,number | jq -r --arg title "$ISSUE_TITLE" '.[] | select(.title == $title) | .number')
            
            if [ -n "$EXISTING_ISSUE" ] && [ "$EXISTING_ISSUE" != "null" ]; then
              echo "Issue already exists: #$EXISTING_ISSUE"
              continue
            fi

            # Create issue body
            ISSUE_BODY_CONTENT="## Python Security Issue Detected (Bandit)\n\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}Severity: $SEVERITY\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}Confidence: $ISSUE_CONFIDENCE\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}Test: \`$TEST_ID\` - $TEST_NAME\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}File: \`$FILENAME\`\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}Line: $LINE_NUMBER\n\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}### Issue Description\n$ISSUE_TEXT\n\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}### Code Context\n\`\`\`python\n$CODE\n\`\`\`\n\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}### Location\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}- File: [\`$FILENAME\`](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/$FILENAME#L$LINE_NUMBER)\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}- Line: $LINE_NUMBER\n\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}### Analysis Information\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}- Detected by: Bandit Python Security Linter\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}- Test ID: $TEST_ID\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}- Workflow Run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}- Commit: [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}- Branch: \`${{ github.ref_name }}\`\n\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}### Recommendations\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}1. Review the flagged code for potential security vulnerabilities\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}2. Consider implementing proper input validation and sanitization\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}3. Use secure coding practices for the identified issue type\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}4. Test the fix thoroughly before deployment\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}5. Re-run Bandit to verify the issue is resolved\n\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}---\n"
            ISSUE_BODY_CONTENT="${ISSUE_BODY_CONTENT}This issue was automatically created by the Bandit Security Analysis workflow. Please review and address the security concern."
            
            # Convert to proper format
            printf -v ISSUE_BODY "%b" "$ISSUE_BODY_CONTENT"

            # Create the issue
            echo "Creating Bandit issue for $TEST_NAME in $FILENAME:$LINE_NUMBER"
            gh issue create \
              --title "$ISSUE_TITLE" \
              --body "$ISSUE_BODY" \
              --label "security,bandit,python,automated" \
              --assignee "${{ github.actor }}" || true

            # Add a small delay to avoid rate limiting
            sleep 2
          done

  security-summary:
    name: Security Analysis Summary
    needs: [check-config, codeql-analysis, bandit-analysis]
    if: always() && needs.check-config.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Security Summary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "## 🔐 Security Analysis Summary"
          echo "**Workflow Run:** #${{ github.run_number }}"
          echo "**Commit:** ${{ github.sha }}"
          echo "**Branch:** ${{ github.ref_name }}"
          echo ""

          # Count security issues with proper error handling
          SECURITY_ISSUES=$(gh issue list --label "security" --state open --json number 2>/dev/null | jq '. | length' 2>/dev/null || echo "0")
          CODEQL_ISSUES=$(gh issue list --label "security,codeql" --state open --json number 2>/dev/null | jq '. | length' 2>/dev/null || echo "0")
          BANDIT_ISSUES=$(gh issue list --label "security,bandit" --state open --json number 2>/dev/null | jq '. | length' 2>/dev/null || echo "0")

          # Ensure variables are numbers
          SECURITY_ISSUES=${SECURITY_ISSUES:-0}
          CODEQL_ISSUES=${CODEQL_ISSUES:-0}
          BANDIT_ISSUES=${BANDIT_ISSUES:-0}

          echo "**Open Security Issues:**"
          echo "- Total: $SECURITY_ISSUES"
          echo "- CodeQL: $CODEQL_ISSUES"
          echo "- Bandit: $BANDIT_ISSUES"

          if [ "$SECURITY_ISSUES" -gt 0 ] 2>/dev/null; then
            echo ""
            echo "⚠️ **Action Required:** Please review and address the security issues found."
            echo ""
            echo "**Recent Security Issues:**"
            gh issue list --label "security" --state open --limit 10 --json number,title,url 2>/dev/null | jq -r '.[] | "- [#\(.number)](\(.url)) \(.title)"' 2>/dev/null || echo "- No issues found or error retrieving issue details"
          else
            echo ""
            echo "✅ **No open security issues found!**"
          fi
